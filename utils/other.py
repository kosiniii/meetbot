import random
import re
import logging
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils import markdown
from keyboards.button_names import chats_bt
from keyboards.reply_button import chats
from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher
from config import BOT_TOKEN, BOT_USERNAME
from aiogram.enums import ParseMode
from .words_or_other import INVISIBLE_CHARS, kats

logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

samples_log = '- - - - - - - - - - - - - - - - - - - - - - - - - - - - -'
group_title = "–ö–æ–º–Ω–∞—Ç–∫–∞"
about_groups = f"""
ü´® –ì—Ä—É–ø–ø–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤.\n
–ë–æ—Ç: @{BOT_USERNAME}
"""

hello_text = markdown.text(
    f'–ü—Ä–∏–≤–µ—Ç\n'
    f'–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤\n'
    f'{markdown.hbold("–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã:")}\n\n'
    f'{chats_bt.one}:\n –ë–æ—Ç –≤–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç, –≤—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –Ω–µ–≥–æ –∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –∏ –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å –æ—Ç 3—Ö —á–µ–ª–æ–≤–µ–∫ –∏ –±–æ–ª—å—à–µ\n\n'
    f'{chats_bt.two}:\n –ë–æ—Ç –≤–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç {markdown.hcode("–∏–º—è")} —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –µ—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∏ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —Ç–æ –≤—ã –∏ –≤–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç–µ {markdown.hcode('@username')} –¥—Ä—É–≥ –¥—Ä—É–≥–∞\n' 
)

def error_logger(in_bot: bool, name_func: str = '', e: Exception = None) -> str:
    error_log = None
    
    if in_bot:
        error_log = '–ù–ï –ü–†–ï–î–í–ò–î–ï–ù–ù–ê–Ø –û–®–ò–ë–ö–ê –≤ —Å–∏—Å—Ç–µ–º–µ ‚ùóÔ∏è\n –ü—Ä–æ—à—É –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @KociHH'
    
    if e:
        error_log = f'–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {name_func}:\n {e}'
    
    return error_log

INVISIBLE_PATTERN = re.compile(f"[{''.join(INVISIBLE_CHARS)}]")

def contains_invisible_chars(text: str) -> bool:
    return bool(INVISIBLE_PATTERN.search(text))

def get_invisible_chars(text: str) -> list[str]:
    return [ch for ch in text if ch in INVISIBLE_CHARS]

def remove_invisible(text: str) -> str:
    return ''.join(ch for ch in text if ch not in INVISIBLE_CHARS)

def kats_emodjes() -> str:
    result_kats = ''
    size_kat = random.randint(1, 5)
    len_kats = len(kats)
    for _ in range(size_kat):
        result_kats += kats[random.randint(1, len_kats - 1)]
    
    return result_kats

class ErrorPrefixFilter(logging.Filter):
    def filter(self, record):
        if record.levelno >= logging.ERROR and not record.msg.startswith('[–û—à–∏–±–∫–∞]'):
            record.msg = f"[–û—à–∏–±–∫–∞] {record.getMessage()}"
        return True
    
async def _send_message_to_user(bot_thread: Bot, target_user_id: int, message_text: str, reply_markup=None) -> Message | None:
    try:
        message_obj = await bot_thread.send_message(
            chat_id=target_user_id,
            text=message_text,
            reply_markup=reply_markup
            )
        return message_obj
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        return None
    
