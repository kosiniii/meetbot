from datetime import datetime, timedelta
from operator import le
from unittest import result
import venv
from winreg import REG_NO_LAZY_FLUSH
from kos_Htools.sql.sql_alchemy.dao import BaseDAO
from data.mongo.config import party_searchers, many_searchers
from keyboards.callback_datas import ContinueSearch
from .celery_app import celery_app
from data.redis_instance import (
    redis_users,
    redis_room,
    redis_random,
    redis_random_waiting, 
    __redis_users__, 
    __redis_room__, 
    __redis_random__, 
    __redis_random_waiting__,
    __queue_for_chat__,
    )
from data.sqlchem import User
from aiogram.utils import markdown
from keyboards.inline_buttons import go_tolk, continue_search_button
from data.utils import CreatingJson
from utils.other import _send_message_to_user
from utils.celery_tools import details_fromDB, random_search, RandomMeet, order_count, RandomGroupMeet
import asyncio
import random
import logging
import time
from utils.time import DateMoscow, dateMSC, moscow_time, time_for_redis
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.types import Message, ReplyKeyboardRemove
from data.middleware.db_middle import session_engine
from aiogram import Bot
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from config import BOT_TOKEN
import pytz


message_text = '–ò–¥–µ—Ç –ø–æ–∏—Å–∫'
logger = logging.getLogger(__name__)

@celery_app.task
def add_user_to_search(message_id: int, user_id: int, base: str) -> bool:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–∏—Å–∫"""
    print("\n\n=============================================== SEARCH INFO ===============================================\n\n")

    if base == redis_random:
        data: dict = __redis_random__.get_cached()
        user_id_str = str(user_id)
    elif base == redis_users:
        data: dict = __redis_users__.get_cached()
        queue_data: list = __queue_for_chat__.get_cached()
        queue_data.append(user_id)
        __queue_for_chat__.cached(data=queue_data, ex=None)
        
    else:
        logger.error(f"–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç base, –∑–Ω–∞—á–µ–Ω–∏–µ: {base}")
        return

    rm = RandomMeet(user_id_str)
    if user_id_str in data.keys():
        if rm.getitem_to_random_user('message_id', data=data) != message_id:
            result = rm.getitem_to_random_user(
                update_many={
                    'message_id': message_id,
                    'data_activity': time_for_redis,
                    'online_searching': True
                    },
                data=data
                )
        else:
            result = rm.getitem_to_random_user(
                update_many={
                    'data_activity': time_for_redis,
                    'online_searching': True
                    },
                data=data
                )
        if result:
            logger.info(f'–û–±–Ω–æ–≤–ª–µ–Ω —é–∑–µ—Ä {user_id} –≤ random_users —á–µ—Ä–µ–∑ getitem_to_random_user')
            return
        else:
            logger.error(f'–Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è —é–∑–µ—Ä {user_id}')
            return
        
    CreatingJson().redis_data_user(
        users=[user_id],
        base=redis_random,
        value={
            'message_id': message_id,
            'online_searching': True
            },
        main_data=data
        )
    logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —é–∑–µ—Ä {user_id} –≤ --{base}')
    print("\n\n===========================================================================================================\n\n")
    return

# patners
@celery_app.task
def remove_user_from_search(user_id: int) -> bool:
    """–ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–∏—Å–∫–∞"""
    rm = RandomMeet(user_id)
    rm.delete_random_user()

@celery_app.task
def monitor_search_users_party():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫"""
    async def _run_task(db_session: AsyncSession):
        print("\n\n=============================================== PARTNERS INFO ===============================================\n\n")
        data: dict = __redis_random__.get_cached()

        users_data = [us for us in data.keys() if us.isdigit() and RandomMeet(us).getitem_to_random_user(item='online_searching', data=data)]
        pair = random_search(users_data, data)

        if pair:
            user1_id, user2_id = pair
            logger.info(f'–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–∞—Ä–∞: {user1_id} –∏ {user2_id}')

            async def _handle_found_pair(db_session: AsyncSession, user1_id: int, user2_id: int):
                users_meet = [user1_id, user2_id]
                bot_thread = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

                async with bot_thread.session:
                    try:
                        full_data_users = await details_fromDB(
                            db_session=db_session,
                            users=users_meet,
                            name_or_pseudonym=True,
                        )

                        if not full_data_users or len(full_data_users) < 2:
                            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö {user1_id} –∏–ª–∏ {user2_id} –∏–∑ –ë–î –∏–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.')
                            return None

                        user_names = {}
                        for uid in users_meet:
                            user_info: dict = full_data_users.get(uid)
                            user_names[uid] = user_info.get('name_or_pseudonym') or user_info.get('user_inf').full_name

                        user1_msg_obj = await _send_message_to_user(
                            bot_thread=bot_thread,
                            target_user_id=user1_id,
                            message_text=f'üîî –î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ -> {markdown.hcode(user_names[user2_id])}',
                            reply_markup=go_tolk()
                        )

                        user2_msg_obj = await _send_message_to_user(
                            bot_thread=bot_thread,
                            target_user_id=user2_id,
                            message_text=f'üîî –î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ -> {markdown.hcode(user_names[user1_id])}',
                            reply_markup=go_tolk()
                        )

                        if not user1_msg_obj and not user2_msg_obj:
                            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. {user1_id}: {user1_msg_obj}, {user2_id}: {user2_msg_obj}.\n –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã")
                            for uid in users_meet:
                                remove_user_from_search.delay(uid)
                                await _send_message_to_user(
                                    bot_thread=bot_thread,
                                    target_user_id=uid,
                                    message_text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.',
                                    reply_markup=continue_search_button()
                                )
                            return None
                        
                        elif not user1_msg_obj:
                            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user1_id} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
                            remove_user_from_search.delay(user1_id)
                            if user2_msg_obj:
                                await _send_message_to_user(
                                    bot_thread=bot_thread,
                                    target_user_id=user2_id,
                                    message_text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.',
                                    reply_markup=continue_search_button(ContinueSearch.continue_search)
                                )
                            return None
                        
                        elif not user2_msg_obj:
                            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user2_id} –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–∏—Å–∫–∞ (–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ).")
                            remove_user_from_search.delay(user2_id)
                            if user1_msg_obj:
                                await _send_message_to_user(
                                    bot_thread=bot_thread,
                                    target_user_id=user1_id,
                                    message_text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞—à–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.',
                                    reply_markup=continue_search_button(ContinueSearch.continue_search)
                                )
                            return None

                        num_meet = await order_count(base=redis_random_waiting)
                        meet_created = CreatingJson().random_waiting(users=users_meet, num_meet=num_meet)
                        if not meet_created:
                            logger.error(f'–ù–µ —Å–æ–∑–¥–∞–ª–∞—Å—å –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è: {user1_id}/{user2_id}. –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞.')
                            for uid in users_meet:
                                remove_user_from_search.delay(uid)
                                await _send_message_to_user(bot_thread, uid, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.', reply_markup=continue_search_button(ContinueSearch.continue_search))
                            return None

                        for uid, ms in zip(users_meet, [user1_msg_obj, user2_msg_obj]):
                            rm = RandomMeet(uid)
                            message_count = int(rm.getitem_to_random_user(item='message_count'))
                            new_message_count = message_count + 1 if isinstance(message_count, int) else 2

                            rm.getitem_to_random_waiting(field='message_id', value=ms.message_id, complete_update=True)
                            rm.getitem_to_random_user(item='message_count', change_to=new_message_count, _change_provided=True)
                        logger.info(f'–î–æ–±–∞–≤–ª–µ–Ω—ã message_id –∏ message_count –¥–ª—è '
                                    f'{user1_id} ({user1_msg_obj.message_id}, {new_message_count}) –∏ '
                                    f'{user2_id} ({user2_msg_obj.message_id}, {new_message_count})'
                                    )

                        for uid_to_clean in users_meet:
                            rm = RandomMeet(uid_to_clean)
                            deactivating_search = rm.getitem_to_random_user(
                                update_many={
                                    'online_searching': False,
                                    'last_animation_text': None,
                                    'added_time': None,
                                },
                                _change_provided=True,
                            )
                            if not deactivating_search:
                                logger.error(f'–ù–µ –∏–∑–º–µ–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {uid_to_clean} –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞.')

                            message_id_to_delete = rm.getitem_to_random_user(item='message_id')
                            if message_id_to_delete:
                                try:
                                    await bot_thread.delete_message(
                                        chat_id=uid_to_clean,
                                        message_id=message_id_to_delete
                                    )
                                    rm.getitem_to_random_user(item='message_id', change_to=None, _change_provided=True)
                                    logger.info(f"–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid_to_clean}.")
                                except Exception as e:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid_to_clean}: {e}")
                            else:
                                logger.warning(f'–ù–µ –Ω–∞–π–¥–µ–Ω–æ message_id —é–∑–µ—Ä–∞ {uid_to_clean}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏.')

                        return users_meet

                    except Exception as e:
                        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—ã ({user1_id}, {user2_id}): {e}. –û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–∏—Å–∫–∞.')
                        for uid in users_meet:
                            remove_user_from_search.delay(uid)
                            await _send_message_to_user(bot_thread, uid, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫ —Å–Ω–æ–≤–∞.', reply_markup=continue_search_button(ContinueSearch.continue_search))
                        return None

            await _handle_found_pair(db_session, user1_id, user2_id)
            print("\n\n=============================================================================================================\n\n")

    async def _outer_task():
        async with session_engine() as db_session:
            await _run_task(db_session)

    asyncio.run(_outer_task())
    print("\n\n=============================================================================================================\n\n")

@celery_app.task
def check_search_timeout(user_id: int, message_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    rm = RandomMeet(user_id)
    data = __redis_random__.get_cached()
    user_id_str = str(user_id)
    
    if user_id_str in data and isinstance(data[user_id_str], dict) and data[user_id_str].get('continue_id') == message_id:
        logger.info(f'–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É (–Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É).')
        
        async def _stop_animation_timeout(user_id: int, message_id: int):
            bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            async with bot.session:
                try:
                    await bot.edit_message_text(
                        chat_id=user_id,
                        message_id=message_id,
                        text='–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É.'
                    )
                except Exception as e:
                    logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}')

        asyncio.run(_stop_animation_timeout(user_id, message_id))
        rm.getitem_to_random_user(item='online_searching', change_to=False, _change_provided=True)
        logger.info(f'–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–∏—Å–∫ –¥–ª—è {user_id_str} –∏–∑ –∑–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏')

# party
@celery_app.task
async def create_private_chat(users_party: list) -> dict | None:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    async with bot.session:
        chat = await RandomGroupMeet(None, None).create_private_group(users_party)
        if not chat:
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —á–µ—Ä–µ–∑ create_private_group')
            return None
        
        try:
            invite_link = await bot.create_chat_invite_link(
                chat_id=chat.id,
                name="–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç",
                member_limit=2
            )
        except Exception as e:
            logger.error(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat.id}: {e}')
            return None
        
        if not invite_link:
            logger.error(f'–Ω–µ —Å–æ–∑–¥–∞–ª–∞—Å—å —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞: {chat.id}')
            return None
        
        room_data = CreatingJson.rooms(invite_link.invite_link, chat.id, users_party)
        return room_data

@celery_app.task
def animate_search():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞"""
    print("\n\n=============================================== ANIMATE INFO ===============================================\n\n")
    data = __redis_random__.get_cached()
    animation_frames = ['.', '. .', '. . .']

    async def _run_async_logic(data: dict):
        bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        async with bot.session:
            async def _edit_message(chat_id: int, message_id: int, text: str):
                try:
                    logger.info(f'–ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —Å —Ç–µ–∫—Å—Ç–æ–º "{text}"')
                    await bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f"{text}"
                    )
                except Exception as e:
                    logger.error(f'[–û—à–∏–±–∫–∞] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} (message_id: {message_id}): {e}')
                    rm = RandomMeet(chat_id)
                    rm.delete_random_user()

            current_second = int(time.time())
            frame_index = current_second % len(animation_frames)
            next_frame_text = animation_frames[frame_index]

            tasks = []
            users_to_update_redis = []
            for user_id_str, user_info in data.items():
                rm = RandomMeet(user_id_str)
                if not user_id_str.isdigit():
                    logger.warning(f'–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö Redis: {user_id_str}')
                    continue

                online_searching = rm.getitem_to_random_user(item='online_searching', data=data)
                if online_searching is False:
                    continue

                user_id = int(user_id_str)
                if isinstance(user_info, dict):
                    message_id = user_info.get('message_id')

                    if message_id is not None:
                        last_animation_text = user_info.get('last_animation_text', '.')
                        calculated_animation_text = f"{next_frame_text}"
                        final_animation_text = calculated_animation_text

                        if calculated_animation_text == last_animation_text:
                            
                            start_index = (frame_index + 1) % len(animation_frames)
                            
                            for i in range(len(animation_frames)):
                                current_index = (start_index + i) % len(animation_frames)
                                frame_candidate_text = f"{animation_frames[current_index]}"
                                
                                if frame_candidate_text != last_animation_text:
                                    final_animation_text = frame_candidate_text
                                    break

                        if final_animation_text != last_animation_text:
                             tasks.append(_edit_message(user_id, message_id, final_animation_text))
                             users_to_update_redis.append((user_id_str, final_animation_text))
                        else:
                             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è —Ñ—Ä–µ–π–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
                    else:
                        logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å message_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.')
                else:
                    logger.error(f'–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø user_info - {type(user_info)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}')
                    rm = RandomMeet(user_id)
                    rm.delete_random_user()

            if tasks:
                await asyncio.gather(*tasks)
                for user_id_str, new_text in users_to_update_redis:
                     if user_id_str in data and isinstance(data[user_id_str], dict):
                        data[user_id_str]['last_animation_text'] = new_text
                     else:
                        logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å last_animation_text –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ Redis.')
                __redis_random__.cached(data=data, ex=None)

    asyncio.run(_run_async_logic(data))
    print("\n\n============================================================================================================\n\n")

@celery_app.task
def update_statistics():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    stats = {
        "searching_users_party": len(__redis_users__.get_cached()),
        "total_chats": len(__redis_room__.get_cached()),

        "searching_patners": len(__redis_random__.get_cached()),
        "waiting_random": len(__redis_random_waiting__.get_cached())
    }
    print(stats)
    return stats

@celery_app.task
def check_inactivity_timeout():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –∏–∑ –ø–æ–∏—Å–∫–∞."""
    print("\n\n=============================================== INACTIVE INFO ===============================================\n\n")
    async def _run_inactivity_check():
        data: dict = __redis_random__.get_cached()
        current_time = time.time()
        bot_instance = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

        async with bot_instance.session:
            async def _send_message_to_user_inactivity(bot_thread: Bot, target_user_id: int, message_text: str, reply_markup=None) -> Message | None:
                """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è —Ç–∞–π–º–µ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)."""
                try:
                    message_obj = await bot_thread.send_message(
                        chat_id=target_user_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
                    return message_obj
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
                    return None

            for user_id_str, user_info in data.items():
                rm = RandomMeet(user_id_str)
                online_searching = rm.getitem_to_random_user(item='online_searching', data=data)

                if online_searching is False:
                    logger.info(f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç {user_id_str} –Ω–µ –≤ –ø–æ–∏—Å–∫–µ (–ª–∞—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {rm.getitem_to_random_user(item='data_activity')})')
                    continue

                if not user_id_str.isdigit():
                    logger.warning(f'–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ—á–∏—Å–ª–æ–≤–æ–π –∫–ª—é—á –≤ –¥–∞–Ω–Ω—ã—Ö Redis: {user_id_str}')
                    continue

                user_id = int(user_id_str)
                if not isinstance(user_info, dict):
                    logger.error(f'–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø user_info - {type(user_info)} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id_str}')
                    remove_user_from_search.delay(user_id_str)
                    continue

                added_time_value = user_info.get('added_time')
                if added_time_value is None:
                    added_time = current_time
                else:
                    try:
                        added_time = float(added_time_value)
                    except (ValueError, TypeError):
                        logger.warning(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ added_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {added_time_value}. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ current_time.')
                        added_time = current_time

                continue_id = user_info.get('continue_id')

                print(f'current_time: {current_time}, added_time: {added_time}\n user_id: {user_id}')
                if current_time - added_time >= 600 and continue_id is None:
                    message_obj = await _send_message_to_user_inactivity(
                        bot_thread=bot_instance,
                        target_user_id=user_id,
                        message_text='–í—ã —Ç—É—Ç?\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É.\n –ï—Å–ª–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥, –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
                        reply_markup=continue_search_button(ContinueSearch.continue_search)
                    )

                    if message_obj:
                        rm = RandomMeet(user_id_str)
                        rm.getitem_to_random_user(
                            update_many={
                                'continue_id': message_obj.message_id,
                                'data_activity': time_for_redis
                                },
                            )
                        check_search_timeout.apply_async(args=[user_id, message_obj.message_id], countdown=10)
                        logger.info(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}')

    asyncio.run(_run_inactivity_check())
    print("\n\n=============================================================================================================\n\n")

@celery_app.task
def moving_inactive_users_to_mongo() -> None:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ mongo_db –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏ redis –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤"""
    print("\n\n=============================================== TRANSLATION INACTIVE TO MONGODB INFO ===============================================\n\n")
    try:
        end_log = "\n\n====================================================================================================================================\n\n"
        data_random: dict = __redis_random__.get_cached()
        user_sets = []
        uids_to_delete = []

        for uid, value in data_random.items():
            data_data = value['data_activity']

            if data_data is not None and isinstance(data_data, str):
                date_conversion = datetime.fromisoformat(data_data)

                if date_conversion.tzinfo is None:
                    date_conversion = pytz.utc.localize(date_conversion).astimezone(moscow_time)
                else:
                    date_conversion = date_conversion.astimezone(moscow_time)

                if (datetime.now(moscow_time) - date_conversion).total_seconds() / 60 >= 60:
                    user_sets.append(data_random[uid])
                    uids_to_delete.append(uid)

        size = len(user_sets)

        if not user_sets:
            logger.info(f'user_sets –±—ã–ª –ø—É—Å—Ç–æ–π -size: {size}')
            print(end_log)
            return 

        for user_id in uids_to_delete:
            rm = RandomMeet(user_id)
            rm.delete_random_user()
        
        if size >= 2:
            party_searchers.insert_many(user_sets)
            logger.info(f'–ë—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ mongo_db –≤ —Ç–∞–±–ª–∏—Ü—É party_searchers -size: {size}')
        
        elif size < 2:
            party_searchers.insert_one(user_sets[0])
            logger.info(f'–ë—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ mongo_db –≤ —Ç–∞–±–ª–∏—Ü—É party_searchers -size: {size}')

        print(end_log)
        return
    
    except Exception as e:
        logger.error(f'–≤ —Ç–∞—Å–∫–µ moving_inactive_users_to_mongo:\n {e}')
        print(end_log)
        return
    

