import asyncio
import logging
from aiogram import F, Bot, Router
from aiogram.types import Message, ReplyKeyboardRemove, BufferedInputFile
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from commands.state import Admin_menu, Menu_chats
from config import ADMIN_ID, BOSS_ID, BOT_ID, BOT_TOKEN, BOT_USERNAME
from data.sqlchem import PrivateChats, SearchUser, User
from keyboards.reply_button import AdminFuctional, back_bt, chats
from keyboards.button_names import main_commands_bt, admin_command_bt, chats_bt, reply_back_bt, empty_bt
from keyboards.lists_command import admin_list, many_kds, party_kds
from utils.celery_tools import RandomGroupMeet
from utils.dataclass import BasicUser
from utils.other import error_logger, samples_log, group_title
from kos_Htools.sql.sql_alchemy import BaseDAO
from sqlalchemy.ext.asyncio import AsyncSession
from utils.time import dateMSC
from data.redis_instance import __redis_room__, __redis_users__, __redis_random__, __redis_random_waiting__
from kos_Htools.telethon_core import multi
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.utils import markdown
from config import PHONE_NUMBER

maximum_chats = 10
logger = logging.getLogger(__name__)
router = Router(name=__name__)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
hello_text = markdown.text(
    f'–ü—Ä–∏–≤–µ—Ç\n'
    f'–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ üíù\n'
    f'{markdown.hbold("–ï—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã:")}\n\n'
    f'{chats_bt.one}:\n'
    f"{markdown.hbold('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')}\n"
    f'–ë–æ—Ç –≤–∞–º –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç, –≤—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤ –Ω–µ–≥–æ –∏ –≤–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏ –∏ –æ–±—â–∞–µ—Ç–µ—Å—å, –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç {markdown.hcode("5")} —á–µ–ª–æ–≤–µ–∫ –∏ –±–æ–ª—å—à–µ.\n\n'
    f"{markdown.hbold('–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:')}\n"
    f'{markdown.hblockquote(
        "+ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–∏—Å–∫—É –≤–∞–º –Ω–∞–¥–æ –≤—ã–π—Ç–∏ —Å —á–∞—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø—Ä–∏—Å—ã–ª–∞–ª –±–æ—Ç.\n"
        "  –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /current_chat, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–∞ –∫–∞–∫–æ–π —á–∞—Ç –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞ —Å—Å—ã–ª–∫–∞.\n\n"
        "+ –ï—Å–ª–∏ —á–∞—Ç –Ω–µ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω (—Ü–µ–ª—ã–µ —Å—É—Ç–∫–∏), –±—É–¥–µ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞.\n"
        )} \n\n'

    f'{chats_bt.two}:\n'
    f"{markdown.hbold('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:')}\n"
    "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –Ω–∞—à–µ–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –≤–∞–º –∏ –≤–∞—à–µ–º—É –ø–∞—Ä—Ç–Ω–µ—Ä—É –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ¬´–æ–±—â–∞—Ç—å—Å—è –ª–∏–±–æ –Ω–µ—Ç¬ª .\n"
    "–ï—Å–ª–∏ –≤—ã –∏ –≤–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—É–¥–µ—Ç–µ —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ, –±–æ—Ç –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n\n"
)

async def admin_back_check(text: str, state: FSMContext, message: Message, block: str):
    if text == reply_back_bt.back:
        await admin_command_(message, state, block=block)
        return True
    return

async def menu_chats(message: Message, state: FSMContext, edit: bool = False):
    if edit:
        try:
            await message.edit_text(
                text=f"{hello_text}",
                reply_markup=None
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é: {e}")
        await message.answer(
            text=f"{hello_text}",
            reply_markup=chats()
        )
    else:
        await message.answer(
            text=f"{hello_text}",
            reply_markup=chats()
        )
    await state.set_state(Menu_chats.system_chats)


@router.message(Command('admin', prefix='/'))
async def admin_panel(message: Message, state: FSMContext):
    admin_id = message.from_user.id
    if admin_id in ADMIN_ID:
        await message.answer(text='üïπ –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è', reply_markup=AdminFuctional().root())
        await state.set_state(Admin_menu.main)

@router.message(StateFilter(Admin_menu.main), F.text.in_(admin_list))
async def admin_command_(message: Message, state: FSMContext, block: str | None = None):
    text = message.text
    if text == admin_command_bt.root.party or block == "party":
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=AdminFuctional().party_from()
        )
        await state.set_state(Admin_menu.rparty)
        
    elif text == admin_command_bt.root.many or block == "many":
        await message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=AdminFuctional().many_from()
        )
        await state.set_state(Admin_menu.rmany)

@router.message(F.text.in_(party_kds), StateFilter(Admin_menu.rparty))
async def patry_panel(message: Message, state: FSMContext):
    text = message.text
    p = admin_command_bt.Party
    user = BasicUser.from_message(message)
    data_searchers: dict = __redis_random__.get_cached()
    data_waiting: dict = __redis_random_waiting__.get_cached()

    if text == p.users_searching:
        size = len(data_searchers.keys())
        await message.answer(
            text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ: {markdown.hbold({size})} —é–∑–µ—Ä–æ–≤."
        )

    elif text == p.users_waiting:
        size = len(data_waiting.keys())
        await message.answer(
            text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ–π—á–∞—Å —é–∑-–∫–æ–º–Ω–∞—Ç: {markdown.hbold({size})} ."
        )

    elif text == p.users_ids_searching:
        users_text = "\n".join(data_searchers.keys())
        file_bytes = users_text.encode('utf-8')
        file = BufferedInputFile(file_bytes, filename="users.txt")

        await bot.send_document(chat_id=user.user_id, document=file, caption=f"C–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤ {dateMSC}")

    elif text == reply_back_bt.back:
        await admin_panel(message, state)

    elif text == empty_bt:
        await message.answer(text="–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")

@router.message(F.text.in_(many_kds), StateFilter(Admin_menu.rmany))
async def many_panel(message: Message, state: FSMContext):
    user = BasicUser.from_message(message)
    text = message.text
    m = admin_command_bt.Many

    if text == m.add_chats:
        await message.answer(
            text=
            f'–í–≤–µ–¥–∏—Ç–µ —á–∞—Ç—ã —Ä–∞–∑–¥–µ–ª—å–Ω–æ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º:\n'
            f'–ü—Ä–∏–º–µ—Ä: 1234 2345 3456 –∏ —Ç–¥.\n',
            reply_markup=back_bt()
        )
        await state.set_state(Admin_menu.Task.add_chat)

    elif text == m.count_rooms:
        pass

    elif text == m.count_users_in_room:
        pass
    
    elif text == m.empty_rooms:
        pass

    elif text == m.users_searching:
        pass

    elif text == m.add_chats_API:
        if user.user_id != BOSS_ID:
            await message.answer(
                text=f"‚úã —Ü—Ü—Ü –ò–∑–≤–∏–Ω–∏ —Ç—ã –Ω–µ {markdown.hlink("–±–æ—Å—Å", f"tg//user?id={BOSS_ID}")}. –¢–µ–±–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç.",
                reply_markup=AdminFuctional().many_from()
                )
        else:
            await message.answer(
                text=
                f"–í–≤–µ–¥–∏—Ç–µ {markdown.hbold('—á–∏—Å–ª–æ')} —á–∞—Ç–æ–≤ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:\n"
                f"‚ùì –ú–∞–∫—Å. {markdown.hbold(maximum_chats)} —á–∞—Ç–æ–≤ –≤ –¥–µ–Ω—å.\n",
                reply_markup=back_bt(),
            )
            await state.set_state(Admin_menu.Task.add_chat_API)

    elif text == reply_back_bt.back:
        await admin_panel(message, state)

    elif text == empty_bt:
        await message.answer(text="–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞.")

@router.message(StateFilter(Admin_menu.Task.add_chat_API))
async def add_chat_API(message: Message, state: FSMContext, db_session: AsyncSession):
    user = BasicUser.from_message(message)
    text = message.text
    back = await admin_back_check(text, state, message, "many")
    if back:
        return
    
    if admin_command_bt.Many.add_chats_API:
        if text.isdigit():
            itext = int(text)

            if itext < maximum_chats and itext > 0:
                success_count = 0
                for i in range(itext):
                    await asyncio.sleep(2)
                    chat_id, _ = await RandomGroupMeet(None, None).create_private_group(group_title=group_title)
                    if chat_id:
                        success_count += 1
                        logger.info(
                            f'–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç: {chat_id}\n'
                            f'–ü–æ —Å—á–µ—Ç—É: {i + 1}/{itext}\n'
                        )
                        chatb = BaseDAO(PrivateChats, db_session)
                        await chatb.create(
                            data={
                                'chat_id': chat_id,
                                'data_created': dateMSC.replace(tzinfo=None),  
                            }
                        )
                        logger.info(f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–¥: {chat_id}\n')

                    else:
                        logger.warning(f'–ù–µ –≤–µ—Ä–Ω—É–ª—Å—è chat_id –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ create_private_group --{chat_id}')
                        continue
        # log block
                await message.answer(
                    text=
                    f"{f'‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã —á–∞—Ç—ã: ¬´{markdown.hbold(success_count)}/{itext}¬ª' if itext != 0 else \
                    f'‚ùå –ù–∏ –æ–¥–∏–Ω —á–∞—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω. ¬´{success_count}/{itext}¬ª'}\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥–∏—Ç—å, –ª–∏–±–æ –≤—Ä–µ–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´{reply_back_bt.back}¬ª",
                    reply_markup=back_bt()
                    )
            else:
                await message.answer(
                    text=
                    f" ‚ùóÔ∏è –í–∞—à–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 0 –ª–∏–±–æ –±–æ–ª—å—à–µ –º–∞–∫—Å. –∑–Ω–∞—á–µ–Ω–∏—è {maximum_chats}.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Ç–æ–≤ –æ—Ç 1 –¥–æ {maximum_chats}."
                    )

        else:
            await message.answer(
                text=
                " ‚ùóÔ∏è –ù–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Ç–æ–≤ –æ—Ç 1 –¥–æ {maximum_chats}."
                )
        return
     

@router.message(StateFilter(Admin_menu.Task.add_chat))
async def enter_chats(message: Message, state: FSMContext, db_session: AsyncSession):
    valid_chats = []
    invalid_chats = []

    text = message.text
    back = await admin_back_check(text, state, message, "many")
    if back:
        return

    chats_ids = text.strip().split()
    total_chats = len(chats_ids)
    
    if total_chats < 1:
        await message.answer(
            text=
            ' ‚ùóÔ∏è –ù–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞.\n'
            f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ {markdown.hbold("id")} —Å–∞–º–æ–≥–æ —á–∞—Ç–∞:\n',
            reply_markup=back_bt()
            )
        await state.set_state(Admin_menu.Task.cagain)

    for chat_id in chats_ids:
        try:
            if not chat_id.isdigit():
                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —á–∞—Ç–∞: {chat_id}")
                invalid_chats.append(chat_id)
                continue
            
            chat_id_valid = "-100" + chat_id
            chat_id = int(chat_id)
            member = await bot.get_chat_member(chat_id_valid, bot.id)
            try:
                if member.status in ("administrator", "creator"):
                    valid_chats.append(chat_id)
                    logger.info(f"–í–∞–ª–∏–¥–Ω—ã–π —á–∞—Ç: {chat_id}")
                else:
                    invalid_chats.append(chat_id)
                    logger.info(f"–ù–µ—Ç —á–∞—Ç–∞: {chat_id} -–±–æ—Ç–∞ –Ω–µ—Ç –ª–∏–±–æ –æ–Ω –Ω–µ –∞–¥–º–∏–Ω")
            
            except Exception as e:
                logger.info(f'–ë–æ—Ç "left"/"kicked" –∏–∑ –≥—Ä—É–ø–ø—ã: {chat_id}')
                invalid_chats.append(chat_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —á–∞—Ç–∞ {chat_id}: {e}")
            invalid_chats.append(chat_id)
    
    chatb = BaseDAO(PrivateChats, db_session)
    added_chats = 0
    for chids in valid_chats:
        try:
            chat_inf = await chatb.get_one(PrivateChats.chat_id == chids)
            if chat_inf:
                logger.info(f"–¢–∞–∫–æ–π —á–∞—Ç —É–∂–µ –µ—Å—Ç—å: {chids} -–ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            else:
                await chatb.create(data={
                    'chat_id': chids,
                    'data_created': dateMSC.replace(tzinfo=None),
                })
                added_chats += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —á–∞—Ç –≤ –±–¥: {chids}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —á–∞—Ç–∞ {chids} –≤ –ë–î: {str(e)}")
            continue

    await message.answer(
        f'üìâ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤:\n'
        f'–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n'
        f'–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {added_chats}\n'
        f'–ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ): {len(valid_chats) - added_chats}\n'
        f'–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö: {len(invalid_chats)}\n'
        f'{samples_log}\n'
        f'–í–≤–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´{main_commands_bt.back}¬ª'
    )

@router.message(StateFilter(Admin_menu.Task.cagain))
async def again_enter(message: Message, state: FSMContext, db_session: AsyncSession):
    curren_state = await state.get_state()
    if curren_state == Admin_menu.Task.cagain:
        await enter_chats(message, state, db_session)

@router.message(Command('start', prefix='/'))
async def starting(message: Message, state: FSMContext, db_session: AsyncSession):
    try:
        user_obj = BasicUser.from_message(message)
        daouser = BaseDAO(User, db_session)
        where_user = User.user_id == user_obj.user_id

        user_id = user_obj.user_id
        full_name = user_obj.full_name

        admin_status = 'user'
        if user_id in ADMIN_ID:
            admin_status = 'admin'
        
        if await daouser.get_one(where_user):
            await daouser.update(
                where_user,
                {
                    'admin_status': admin_status,
                    'full_name': full_name,
                    'last_activity': dateMSC.replace(tzinfo=None)
                }
            )
        else:
            await daouser.create(
                {
                    'user_id': user_id,
                    'full_name': full_name,
                    'admin_status': admin_status,
                    'last_activity': dateMSC.replace(tzinfo=None)
                }
            )
        await menu_chats(message, state)

    except Exception as e:
        error_logger(True)
        logger.warning(error_logger(False, 'starting', e))
    return
