import logging
from kos_Htools import BaseDAO
from commands.state import Main_menu, Menu_chats, find_groups, Admin_menu, random_user, Back
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.utils import markdown
from data.redis_instance import (
    __redis_room__,
    __redis_users__,
    redis_random,
    redis_users,
    __redis_random__,
    __queue_for_chat__,
    )
from keyboards.lists_command import command_chats, main_command_list
from aiogram import F, Bot, Router
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from data.sqlchem import User, SearchUser
from keyboards.button_names import chats_bt, main_commands_bt, search_again_bt, edit_count_users
from keyboards.reply_button import chats, main_commands, back_bt

from utils.dataclass import BasicUser
from data.celery.tasks import message_text, remove_user_from_search, add_user_to_search, monitor_search_users_party
from utils.celery_tools import bot, RandomMeet
from utils.time import DateMoscow, dateMSC
# ¬´ ¬ª
minimum_users = 4
pseudonym = 'psdn.'
anonim = 'Anonim'
logger = logging.getLogger(__name__)
router = Router(name=__name__)

text_instructions = markdown.text(
    f'{main_commands_bt.find} - –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞(–æ–≤)\n\n'
    f"{main_commands_bt.stop} - –≤—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞\n\n"
    f"{markdown.hblockquote(' ‚ùì –ü–æ–∏—Å–∫ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –≤–∞—à–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤. –í—Ç–æ—Ä–æ–π —Ä–∞–∑ –≤—ã –Ω–µ –∏—Ö –≤—Å—Ç—Ä–µ—Ç–∏—Ç–µ!')}"
)

@router.message(F.text.in_(command_chats), StateFilter(Menu_chats.system_chats))
async def system_chats(message: Message, state: FSMContext):
    text = message.text
    if text == chats_bt.one:
        await message.answer(
            text=
            f'–°–µ–π—á–∞—Å –≤ –ø–æ–∏—Å–∫–µ: {markdown.hbold(len(__redis_users__.get_cached()))}'
            f'–í–≤–µ–¥–∏—Ç–µ —Å –∫–∞–∫–∏–º –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ:\n'
            f'¬´–º–∏–Ω. –æ—Ç {markdown.hcode(f'{minimum_users}')}¬ª',
            reply_markup=back_bt()
        )
        await state.set_state(find_groups.enter_users)

    elif text == chats_bt.two:
        await message.answer(text=text_instructions, reply_markup=main_commands())
        await state.set_state(random_user.main)

@router.message(StateFilter(find_groups.enter_users))
async def management_searching(message: Message, state: FSMContext, db_session: AsyncSession):
    search_number = None
    text = message.text
    user = BasicUser.from_message(message)

    if text == main_commands_bt.back:
        from basic_command import menu_chats
        await menu_chats(message, state)

    if text.isdigit():
        # adding db
        itext = int(text)
        userb = BaseDAO(SearchUser, db_session)
        if itext < minimum_users:
            await message.answer(f' ‚ùóÔ∏è –ó–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ {markdown.hbold("–º–∏–Ω–∏–º—É–º–∞")}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {minimum_users - 1}.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:')
            await state.set_state(find_groups.again)

        user_obj = await userb.get_one(SearchUser.user_id == user.user_id)
        if user_obj:
            if user_obj.search_number != itext:
                await userb.update(
                    where=SearchUser.user_id == user.user_id,
                    data={
                        'search_number': itext,
                    })
                search_number = itext
            else:
                search_number = user_obj.search_number
        else:
            await userb.create(data={
                'search_number': itext,
                "user_id": user.user_id,
            })
            search_number = itext

        await message.answer(
            text=
            f"–ó–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {markdown.hbold(search_number)}\n"
            f"{text_instructions}",
            reply_markup=main_commands(buttons=[edit_count_users])
            )
        await state.set_state(find_groups.start_searching)

    else:
        await message.answer(f" ‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ {markdown.hbold('—á–∏—Å–ª–æ')}.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        await state.set_state(find_groups.again)

@router.message(StateFilter(find_groups.again))
async def management_searching_again(message: Message, state: FSMContext):
    try:
        await management_searching(message, state)
        await state.set_state(find_groups.enter_users)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ management_searching_again: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤–≤–æ–¥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.set_state(find_groups.enter_users)

@router.message(F.text.in_(main_command_list), StateFilter(find_groups.start_searching))
async def reply_command(message: Message, state: FSMContext, db_session: AsyncSession):
    user = BasicUser.from_message(message)
    text = message.text

    if text == main_commands_bt.find:
        add_user_to_search.delay()

    elif text == main_commands_bt.stop:
        pass

    elif text == main_commands_bt.back:
        from basic_command import menu_chats
        await menu_chats(message, state)

    elif text == edit_count_users:
        await system_chats(message, state)
        await state.set_state(Menu_chats.system_chats)


@router.message(F.text.in_(main_command_list), StateFilter(random_user.main, random_user.search_again))
async def send_random_user(message: Message, state: FSMContext, db_session: AsyncSession):
    limit_message = 5
    user = BasicUser.from_message(message)
    text = message.text
    rm = RandomMeet(user.user_id)
    rm.getitem_to_random_user(item='contine_id', change_to=None, _change_provided=True)
    try:
        from utils.other import remove_invisible
        if not remove_invisible(user.full_name):
            await state.set_state(random_user.if_null)
            await message.answer(
                text=f'–Ø –≤–∏–∂—É —É —Ç–µ–±—è –Ω–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫–Ω–µ–π–º. –ü—Ä–æ—à—É –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º üìù',
                reply_markup=back_bt()
                )

        if text == main_commands_bt.find:
            message_count = rm.getitem_to_random_user(item='message_count')

            if not message_count:
                message_count = 0
                
            if message_count >= limit_message:
                await message.answer(
                    text=
                    f'‚ÄºÔ∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –Ω–µ —Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. {message_count}/{limit_message}\n'
                    f'–î–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ–∏—Å–∫ –±—ã–ª {markdown.hcode("–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")}, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ (üòí —Å–∫–∏–ø) –∏–ª–∏ (‚úÖ –æ–±—â–∞—Ç—å—Å—è)\n'
                    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å {markdown.hcode("–ø–æ–∏—Å–∫")}\n'
                )
                rm.getitem_to_random_user(item='online_searching', change_to=False, _change_provided=True)
                logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–∏—Å–∫')
                return
            
            message_obj = await message.answer(message_text) 
            add_user_to_search.delay(message_obj.message_id, user.user_id, redis_random)
            monitor_search_users_party.delay()

        if text == main_commands_bt.stop:
            if rm.getitem_to_random_user(item='online_searching'):
                online_searching = rm.getitem_to_random_user(item='online_searching', change_to=False, _change_provided=True)

                logger.info(f'{user.user_id} –≤—ã—à–µ–ª –∏–∑ –ø–æ–∏—Å–∫–∞ –ø–æ —Å–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é -online_searching: {online_searching}')
                await message.answer(
                    text='‚ùóÔ∏è –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.\n',
                    reply_markup=main_commands()
                )
                await state.set_state(random_user.search_again)
                return
            else:
                await message.answer(
                    text='‚ùì –í—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤ –ø–æ–∏—Å–∫–µ.\n',
                    reply_markup=main_commands()
                )
        
        if text == main_commands_bt.back:
            from commands.basic_command import menu_chats
            await menu_chats(message, state)

    except Exception as e:
        from utils.other import error_logger
        logger.error(error_logger(False, 'send_random_user', e))


@router.message(F.text, StateFilter(random_user.if_null))
async def saved_name_user(message: Message, state: FSMContext, db_session: AsyncSession):
    user = BasicUser.from_message(message)
    data = await state.get_data()
    text: str = data.get('name')
    userb = BaseDAO(User, db_session)
    if not text:
        text = message.text

    from utils.other import remove_invisible
    if not remove_invisible(text):
        await message.answer(f'–Ø –≤–∏–∂—É —á—Ç–æ –≤—ã –æ–ø—è—Ç—å –≤–≤–µ–ª–∏ –Ω–µ–≤–∏–¥–∏–º—ã–π –Ω–∏–∫–Ω–µ–π–º, –ø—Ä–æ—à—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —Å–Ω–æ–≤–∞ üîÑ')
        await state.set_state(random_user.again_name)

    save = await userb.update(User.user_id == user.user_id, {'pseudonym': f"{pseudonym} {text}"})
    if save:
        await state.set_state(random_user.main)
        await message.answer(
            text=f'üëå –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Å–µ–≤–¥–æ–Ω–∏–º: {text}\n –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–∏—Å–∫—É.',
            reply_markup=main_commands()
            )
    else:
        logger.info(f'–ü—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞ {text} —é–∑–µ—Ä–∞ {user.user_id}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
        from utils.other import error_logger
        await message.answer(error_logger(True))

@router.message(F.text, StateFilter(random_user.again_name))
async def again_enter_name(message: Message, state: FSMContext):
    await state.set_data({'name': message.text})
    await state.set_state(random_user.if_null)

